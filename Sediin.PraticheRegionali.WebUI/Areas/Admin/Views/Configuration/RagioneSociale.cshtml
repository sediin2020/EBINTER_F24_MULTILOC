@model Sediin.PraticheRegionali.WebUI.Areas.Admin.Models.RagioneSocialeConfigModel


@Scripts.Render("~/bundles/jqueryval")

@Html.RicercaModulo("Configurazione Ragione sociale")

<hr />

@using (Ajax.BeginForm("RagioneSociale", new AjaxOptions
{
    OnBegin = "alertWaid()",
    OnSuccess = "onSuccessRagioneSociale",
    OnFailure = "handleError"
}))
{
    @Html.AntiForgeryToken()


    <div class="form-horizontal">

        <div class="row">

            @*<div class="col-md-2">
            <div class="form-group">
                @Html.LabelFor(model => model.EnteId, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.TextBoxFor(model => model.EnteId, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EnteId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>*@
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Nome, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.NomeCordo, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.NomeCordo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NomeCordo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.PartitaIva, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.PartitaIva, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PartitaIva, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.SitoWeb, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.SitoWeb, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SitoWeb, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.UriPortale, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.UriPortale, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UriPortale, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Indirizzo, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Indirizzo, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Indirizzo, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Citta, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Citta, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Citta, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cap, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Cap, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Cap, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Regione, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Regione, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Regione, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Provincia, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Provincia, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Provincia, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Fax, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Fax, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Fax, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4 mt-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Pec, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Pec, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Pec, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4 mt-2">
                @Html.Label("Logo", htmlAttributes: new { @class = "control-label" })

                <div class="custom-file">
                    <input type="file" class="form-control"
                           id="Logo"
                           name="Logo"
                           accept=".png">

                    <label class="badge bg-info"> in formato .png</label>
                    @Html.HiddenFor(model => model.LogoBase64, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LogoBase64, "", new { @class = "text-danger" })

                </div>

                <img id="imagelogo" class="img-fluid rounded col-md-6" style="margin-left: 40px; margin-bottom: 10px; mix-blend-mode: multiply; "
                     src="@Html.GetConfiguration().LogoBase64" />
            </div>

        </div>
    </div>
    <hr />

    <div class="form-group row">
        <div class="col-md-12 text-center">
            <input type="submit" value="Aggiorna" class="btn btn-primary" />
        </div>
    </div>

}

<script type="text/javascript">

    $('input[type=file]').on('change', function () {

        var _span = $("span[data-valmsg-for='LogoBase64']");

        const file = document.querySelector('input[type=file]').files[0];
        const reader = new FileReader();
        var tmppath = URL.createObjectURL(file);

        reader.addEventListener("load", function () {
            //alert(reader.result)
            var myRe = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(['.png'])$", "gi");

            if (!myRe.exec(getFileExtension(file.name))) {
                _span.addClass("field-validation-error");
                _span.html("Estensione non valida");
                _span.show();
                return;
            }

            if (getFileSize(file.size) > 1) {
                _span.addClass("field-validation-error");
                _span.html("Dimensione massima 1MB");
                _span.show();
                return;
            }

            $("#imagelogo").attr("src", reader.result);
            $("#LogoBase64").val(reader.result);

            _span.hide();
            _span.html("");
        }, false);

        if (file) {
            reader.readAsDataURL(file);
        }
        $(this).val('');

    });

</script>


<script>
    function onSuccessRagioneSociale(data) {
        @Html.OnSuccess();
    }
</script>