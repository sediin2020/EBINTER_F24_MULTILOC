@model Sediin.PraticheRegionali.WebUI.Areas.Backend.Models.SportelloViewModel
@using Sediin.PraticheRegionali.WebUI

@Scripts.Render("~/bundles/jqueryval")

@using (Ajax.BeginForm("Anagrafica", new AjaxOptions
{
    OnBegin = "alertWaid()",
    OnSuccess = "onSuccessAnagrafica",
    OnFailure = "handleError"
}))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.SportelloId)
    @Html.HiddenFor(model => model.Ruolo)

    var _matricolaReadOnly = false;

    if (User.IsInRole(IdentityHelper.Roles.Sp_CAF.ToString())
    || User.IsInRole(IdentityHelper.Roles.Sp_Consulente.ToString())
    || User.IsInRole(IdentityHelper.Roles.Sp_Datoriale.ToString())
    || User.IsInRole(IdentityHelper.Roles.Sp_Ebinter.ToString())
    || User.IsInRole(IdentityHelper.Roles.Sp_Sindacale.ToString()))
    {
        _matricolaReadOnly = true;
    }

    if (Model.ReadOnly.GetValueOrDefault() || Model.SportelloId != 0)
    {
        _matricolaReadOnly = true;
    }

    <h3>Dati Anagrafici @Html.GetRoleFriendlyName(Model.Ruolo)</h3>
    <hr />
    <div class="form-horizontal mt-4">

        <div class="row">

            <h4>
                <span class="badge bg-secondary">Dati Ragione Sociale</span>
            </h4>


            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.RagioneSociale, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxForReadOnly(model => model.RagioneSociale, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RagioneSociale, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.CodiceFiscalePIva, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxForReadOnly(model => model.CodiceFiscalePIva, new { @class = "form-control text-uppercase" }, null, _matricolaReadOnly)
                        @Html.ValidationMessageFor(model => model.CodiceFiscalePIva, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


        </div>


        <div class="row mt-3">

            @{Html.RenderPartial("~/Areas/Backend/Views/Moduli/IndirizzoConRegioni.cshtml", new Sediin.PraticheRegionali.WebUI.Areas.Backend.Models.IndirizzoViewModel
                {
                    ReadOnly = Model.ReadOnly,

                    IncludiRegioni = true,
                    IndirizzoElement = "Indirizzo",
                    ProvinciaElement = "ProvinciaId",
                    ComuneElement = "ComuneId",
                    LocalitaElement = "LocalitaId",
                    RegioneElement = "RegioneId",

                    Sigpro = Model.Provincia?.SIGPRO,
                    Codcom = Model.Comune?.CODCOM,
                    Codreg = Model.Regione?.CODREG,

                    Indirizzo = Model.Indirizzo,
                    ComuneId = Model.ComuneId,
                    RegioneId = Model.RegioneId,
                    LocalitaId = Model.LocalitaId,
                    ProvinciaId = Model.ProvinciaId,

                });}
        </div>


        <hr class="mb-4" />

        <div class="row">

            <h4>
                <span class="badge bg-secondary">Dati Referente</span>
            </h4>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxForReadOnly(model => model.Cognome, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxForReadOnly(model => model.Nome, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>

        <div class="row mt-3">

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Pec, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxForReadOnly(model => model.Pec, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Pec, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxForReadOnly(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>

        <div class="row mt-3">

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxForReadOnly(model => model.Telefono, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Cellulare, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.TextBoxForReadOnly(model => model.Cellulare, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Cellulare, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        @if (User.IsInRole(IdentityHelper.Roles.Admin.ToString()) && Model.DelegheSportelloAzienda?.Where(x => x.DelegaAttiva == true)?.Count() > 0 ||
             User.IsInRole(IdentityHelper.Roles.Super.ToString()) && Model.DelegheSportelloAzienda?.Where(x => x.DelegaAttiva == true)?.Count() > 0)
        {
            <hr />
            <div class="row mt-3">
                <h4>
                    <span class="badge bg-warning">Aziende con delega attiva</span>
                </h4>
                <div style="height:250px; overflow:auto" class="mt-3">
                    <table class="table table-striped table-bordered table-hover">
                        <thead class="table-fixed">
                            <tr class="text-center bg-dark text-white">
                                <th>Ragione Sociale</th>
                                <th>Matricola Inps</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.DelegheSportelloAzienda.Where(x => x.DelegaAttiva == true))
                            {
                                <tr>
                                    <td>
                                        @if (item.Azienda != null)
                                        {
                                            <span>@item.Azienda.RagioneSociale</span>
                                        }
                                    </td>
                                    <td>
                                        @if (item.Azienda != null)
                                        {
                                            <span>@item.Azienda.MatricolaInps</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        
        @if (User.IsInRole(IdentityHelper.Roles.Admin.ToString()) && Model.DelegheSportelloDipendente?.Where(x => x.DelegaAttiva == true)?.Count() > 0 ||
             User.IsInRole(IdentityHelper.Roles.Super.ToString()) && Model.DelegheSportelloDipendente?.Where(x => x.DelegaAttiva == true)?.Count() > 0)
        {
            <hr />
            <div class="row mt-3">
                <h4>
                    <span class="badge bg-warning">Dipendenti con delega attiva</span>
                </h4>
                <div style="height:250px; overflow:auto" class="mt-3">
                    <table class="table table-striped table-bordered table-hover">
                        <thead class="table-fixed">
                            <tr class="text-center bg-dark text-white">
                                <th>Nominativo</th>
                                <th>Codice Fiscale</th>

                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var item in Model.DelegheSportelloDipendente.Where(x => x.DelegaAttiva == true))
                            {
                                <tr>
                                    <td>
                                        @if (item.Dipendente != null)
                                        {
                                            <span>@item.Dipendente.Nome</span> <span>@item.Dipendente.Cognome</span>
                                        }
                                    </td>
                                    <td>
                                        @if (item.Dipendente != null)
                                        {
                                            <span>@item.Dipendente.CodiceFiscale</span>
                                        }
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        }

        <hr />


        <div class="row mt-3">
            <div class="form-group col-md-12">
                <div class="form-check form-switch mt-3">

                    @Html.CheckBox("AutorizzoComunicazioni", new { @class = "form-check-input" })

                    <label class="form-check-label fw-bold text-info" style="margin-left:10px" for="AutorizzoComunicazioni">
                        Autorizzo l'invio di comunicazioni istituzionali da parte di @Html.GetConfiguration().RagioneSociale.Nome.
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.AutorizzoComunicazioni, "")
            </div>
        </div>

        <hr />

        <div class="row mt-3">
            <div class="col-md-12 text-danger">
                <strong>* Campi obbligatori</strong>
            </div>
        </div>

        <div class="form-group text-center mt-5">
            <hr />
            <button type="submit" class="btn btn-primary">
                @if (Model.SportelloId == 0)
                {
                    <span>Inserisci @Html.GetRoleFriendlyName(Model.Ruolo)</span>
                }
                else
                {
                    <span>Aggiorna dati Anagrafici</span>
                }
            </button>

            <button id="buttonCloseModal" type="button" onclick="hideModal()" class="btn btn-danger">
                Chiudi finestra
            </button>
        </div>
    </div>
}
<script>
    function onSuccessAnagrafica(data) {
    if (data.isValid) {

        var _ismodal = $(".modal").hasClass('show');
        if (_ismodal) {
            updateListRicerca();
        }

        var _message = data.message;

            $.get("@Url.Action("Anagrafica", "Sportello")", { id: data.sportelloId }, function (data) {
            if (_ismodal) {
                showModalFullScreen_NoHeaderFooter(data);
                alertSuccess(_message);
            }
            else {
                $("#contentrenderbody").html(data);
                alertSuccess(_message);
            }
        });
    }
    else {
        alertDanger(data.message);
    }
}

@if (!Model.InformazioniPersonaliCompilati.GetValueOrDefault()
    && (!User.IsInRole(IdentityHelper.Roles.Admin.ToString()) && !User.IsInRole(IdentityHelper.Roles.Super.ToString())))
    {
        @:alertInfo("Per proseguire è necessario compilare la scheda Anagrafica")
    }

    @Html.ButtonCloseModal(false)

</script>
<script src="~/Scripts/unobtrusiveParseForm.js"></script>
<script src="~/Scripts/checksumCFPiva.js"></script>
