@model Sediin.PraticheRegionali.WebUI.Areas.Backend.Models.UtentiViewModel
@{
    var _isSportello = false;
    //switch (Enum.Parse(typeof(IdentityHelper.Roles), Model.Ruolo, true))
    //{
    //    case IdentityHelper.Roles.Sp_CAF:
    //    case IdentityHelper.Roles.Sp_Consulente:
    //    case IdentityHelper.Roles.Sp_Datoriale:
    //    case IdentityHelper.Roles.Sp_Sindacale:
    //    case IdentityHelper.Roles.Sp_Ebinter:
    //        _isSportello = true;
    //        break;
    //    default:
    //        _isSportello = false;
    //        break;
    //}

}

@using (Ajax.BeginForm("Utente", new AjaxOptions
{
    OnBegin = "alertWaid()",
    OnSuccess = "onSuccessUtente",
    OnFailure = "handleError"
}))
{


    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.UserId)
    @Html.HiddenFor(model => model.AssociaProvincia)

    var _readOnly = Model.ReadOnly.GetValueOrDefault() ? true : !string.IsNullOrEmpty(Model.UserId);

<div class="form-horizontal">

    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.TextBoxForReadOnly(model => model.Nome, new { @class = "form-control", type = "search" })
                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.Cognome, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.TextBoxForReadOnly(model => model.Cognome, new { @class = "form-control", type = "search" })
                    @Html.ValidationMessageFor(model => model.Cognome, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.TextBoxForReadOnly(model => model.Email, new { @class = "form-control", type = "search" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

    </div>
    <div class="row mt-2">
        @if (Model.AssociaProvincia.GetValueOrDefault())
        {
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label">Provincia</label>
                    <div class="col-md-12">
                        @Html.DropDownListForReadOnly(model => model.ProvinciaId, Html.SelectList(Model.Provincie, "ProvinciaId", "DENPRO", true), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProvinciaId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        }

        <div class="col-md-4">
            <div class="form-group">
                @{
                    var _titolo = "Username";
                    if (_isSportello)
                    {
                        _titolo = "Codice Fiscale / P.Iva (Username)";
                    }
                }
                <label class="control-label">@_titolo</label>
                <div class="col-md-12">
                    @Html.TextBoxForReadOnly(model => model.UserName, new { @class = "form-control" }, readOnly: _readOnly)
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.Ruolo, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12">
                    @Html.GetRoleFriendlyName(Model.Ruolo)
                    @Html.HiddenFor(model => model.Ruolo)
                    @Html.ValidationMessageFor(model => model.Ruolo, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
    </div>

    @if (string.IsNullOrEmpty(Model.UserId))
    {
        <div class="row mt-1">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", type = "search" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.Label("Conferma Password", htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", type = "search" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
    }
    else
    {
        if (User.IsInRole(IdentityHelper.Roles.Admin.ToString()) || User.IsInRole(IdentityHelper.Roles.Super.ToString()))
        {
            <div class="row mt-1">
                <div class="col-md-6">
                    <div class="form-check form-switch mt-3">

                        @Html.CheckBox("Bloccato", new { @class = "form-check-input" })

                        <label class="form-check-label" style="margin-left:10px" for="Bloccato">
                            Blocca utente per non accedere al portale
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Bloccato, "")
                </div>

                <div class="form-group col-md-6">
                    <div class="form-check form-switch mt-3">

                        @Html.CheckBox("EmailConfermata", new { @class = "form-check-input" })

                        <label class="form-check-label" style="margin-left:10px" for="EmailConfermata">
                            Email confermata
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.EmailConfermata, "")
                </div>
            </div>
        }
        else
        {
            <div class="row mt-1">
                <div class="col-md-12">
                    <div class="form-check form-switch mt-3">

                        @Html.CheckBox("Bloccato", new { @class = "form-check-input" })

                        <label class="form-check-label" style="margin-left:10px" for="Bloccato">
                            Blocca utente per non accedere al portale
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Bloccato, "")
                </div>
            </div>
        }

    }


    <div class="modal-footer mt-3">

        @if (User.IsInRole(IdentityHelper.Roles.Admin.ToString()) ||
             User.IsInRole(IdentityHelper.Roles.Super.ToString()))
        {
            var _t = "Aggiorna utente";
            if (string.IsNullOrEmpty(Model.UserId))
            {
                _t = "Crea utente";
            }

            if (Model.UserName != null && User.Identity.Name.ToUpper() == Model.UserName.ToUpper())
            {
                <a href="#" class="btn btn-primary disabled">@_t</a>
                <a href="#" class="btn btn-warning disabled">Elimina utente</a>
            }
            else
            {
                <button type="submit" class="btn btn-primary">@_t</button>
            }

            if (Model.UserName != null && ((User.Identity.Name.ToUpper() != Model.UserName.ToUpper())))
            {
                <button type="button" onclick="cancellaUtente()" class="btn btn-warning">Elimina utente</button>
            }

        }
        <button type="button" onclick="hideModal()" class="btn btn-danger" id="buttonCloseModal">Chiudi finestra</button>
    </div>
</div>
}


@Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/unobtrusiveParseForm.js"></script>
@if (_isSportello)
{
    <script src="~/Scripts/checksumCFPiva.js"></script>

}

<script src="~/Scripts/passwordStrong.js"></script>

<script>
    function onSuccessUtente(data) {
        @Html.OnSuccessHideModal()
    }

     function cancellaUtente() {

         const swalWithBootstrapButtons = Swal.mixin({
             customClass: {
                 confirmButton: 'btn btn-success mr-1',
                 cancelButton: 'btn btn-danger mr-1'
             },
             buttonsStyling: false
         });

         playNotifyConfirm();

         swalWithBootstrapButtons.fire({
            html: "Sicuro di voler cancellare il utente?",
            icon: "question",
            showCancelButton: true,
            confirmButtonText: 'Conferma',
            cancelButtonText: 'Annulla',
            allowOutsideClick: false,
            allowEscapeKey: false
        }).then((result) => {
            if (result.isConfirmed) {
                alertWaid();
                $.post("@Html.EncodedAction("EliminaUtente", "Utenti", new { id = Model.UserId })", function (data) {
                   @Html.OnSuccessHideModal()
                });
            }
        })
    }

    $("#Password").on("focus", function () { $(this).attr("type", "password") });
    $("#ConfirmPassword").on("focus", function () { $(this).attr("type", "password") });

</script>