@model Sediin.PraticheRegionali.WebUI.Areas.Backend.Models.PraticheAziendaContainer
@using Sediin.PraticheRegionali.WebUI.Helpers;
@using Sediin.PraticheRegionali.WebUI;
@using Sediin.PraticheRegionali.DOM;


@Scripts.Render("~/bundles/jqueryval")

@using (Ajax.BeginForm("SalvaRichiesta", new { }, new AjaxOptions
{
    OnBegin = "alertWaid()",
    OnSuccess = "onSuccessSalvaRichiesta",
    OnFailure = "handleError"
}, new { id = "formSalvaRichiesta" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.RichiestaId)
    @Html.HiddenFor(model => model.AziendaId)
    @Html.HiddenFor(model => model.DipendenteId)
    @Html.HiddenFor(model => model.TipoRichiestaId)
    @Html.HiddenFor(model => model.StatoId)
    @Html.HiddenFor(model => model.ChildClassRowCount)

    <div class="form-horizontal" id="containerRichiestaBody">

        <h4>Richiesta @Model.DescrizioneTipoRichiesta</h4>
        <h5 class="mt-2">
            <label class="badge bg-@Html.GetRichiestaStatoCss(Model.StatoId) text-start">
                Stato @Model.DescrizioneStato
            </label>

            @if (!string.IsNullOrWhiteSpace(Model.ProtocolloId))
            {
                <br />
                <small class="mt-3">
                    <strong class="text-info">Protocollo: @Model.ProtocolloId</strong>
                </small>

            }

        </h5>
        <hr />

        @if (Model.StatoId == (int)SediinPraticheRegionaliEnums.StatoPratica.Confermata)
        {
            <div class="col-md-12 fw-bold">

                @if (Model.PraticheRegionaliImprese.LiquidazionePraticheRegionali.Count() > 0)
                {

                    var _liquidata = Model.PraticheRegionaliImprese.LiquidazionePraticheRegionali.Where(x => x.Liquidazione.StatoLiquidazioneId == (int)SediinPraticheRegionaliEnums.StatoLiqidazione.Liquidata);
                    var _inliquidazione = Model.PraticheRegionaliImprese.LiquidazionePraticheRegionali.Where(x => x.Liquidazione.StatoLiquidazioneId == (int)SediinPraticheRegionaliEnums.StatoLiqidazione.InLiquidazione);

                    if (_liquidata.Count() > 0)
                    {

                        <small class="text-@Html.GetLiquidazioneStatoCss((int)SediinPraticheRegionaliEnums.StatoLiqidazione.Liquidata)">"Liquidata @Html.ToShortDate(_liquidata.LastOrDefault().Liquidazione.DataLavorazione) su Iban: @_liquidata.LastOrDefault().PraticheRegionaliImprese.Iban"</small>
                    }
                    else if (_inliquidazione.Count() > 0)
                    {
                        <small class="text-@Html.GetLiquidazioneStatoCss((int)SediinPraticheRegionaliEnums.StatoLiqidazione.InLiquidazione)">"In Liquidazione"</small>
                    }
                    else
                    {
                        <small class="text-info">"Da Liquidare"</small>
                    }
                }
                else
                {
                    <small class="text-info">"Da Liquidare"</small>
                }

            </div>
            <hr />

        }
        <div class="row">
            <div class="col-md-12">
                @Html.Raw(Model.NoteTipoRichiesta)
            </div>
        </div>

        <hr />

        @{Html.RenderAction("AnagraficaAzienda", new { aziendaId = Model.AziendaId, iban = Model.Iban, ibanRequired = Model.IbanAziendaRequired, readOnly = Model.ReadOnly });}

        @if (Model.DipendenteId.HasValue)
        {
            Html.RenderAction("AnagraficaDipendente", new { dipendenteId = Model.DipendenteId, iban = Model.Iban, ibanRequired = Model.IbanDipendenteRequired, readOnly = Model.ReadOnly });
        }

        @{ Html.RenderAction("RichiedentiRichiesta", "Pratiche", new
            {
                Model.RichiestaId,
                Model.TipoRichiestaId,
                Model.ReadOnly
            });}

        @{ Html.RenderAction("RequisitiRichiesta", "Pratiche", new
            {
                Model.RichiestaId,
                Model.TipoRichiestaId,
                Model.ReadOnly
            });}

        @{
            if (!string.IsNullOrWhiteSpace(Model.View))
            {
                Html.RenderPartial($"~/Areas/Backend/Views/Pratiche/TipoRichiesta/{Model.View}.cshtml", Model.DataModel);
            }
        }

        @{ Html.RenderAction("AllegatiRichiesta", "Pratiche", new
            {
                Model.RichiestaId,
                Model.TipoRichiestaId,
                Model.ReadOnly
            });}


        @{ Html.RenderAction("DprRichiesta", "Pratiche", new
            {
                Model.RichiestaId,
                Model.TipoRichiestaId,
                Model.ReadOnly
            });}



        @if (Model.StoricoStatoPratica != null)
        {
            if (User.IsInRole(IdentityHelper.Roles.Admin.ToString()) ||
                User.IsInRole(IdentityHelper.Roles.Super.ToString()))
            {
                Html.RenderPartial("StoricoStatoPratica", Model.StoricoStatoPratica);
            }
            else
            {
                Html.RenderPartial("RevisionePratica", Model.StoricoStatoPratica?.Where(x => x.StatoPraticaId == (int)SediinPraticheRegionaliEnums.StatoPratica.Revisione));
            }
        }

        @if (Model.StatoId == (int)Sediin.PraticheRegionali.DOM.SediinPraticheRegionaliEnums.StatoPratica.Confermata)
        {
            <div id="containerImportoCalcolati">
                @{ Html.RenderPartial("ImportoCalcolati", new Sediin.PraticheRegionali.DOM.DAL.PraticheAziendaUtility.CalcolaImportoRimborsatoModel
                    {
                        AliquoteIRPEF = Model.AliquoteIRPEF,
                        ImportoContributo = Model.ImportoContributo,
                        ImportoContributoNetto = Model.ImportoContributoNetto,
                        ImportoIRPEF = Model.ImportoIRPEF
                    });}
            </div>
        }


        @if (Model.StatoId == (int)Sediin.PraticheRegionali.DOM.SediinPraticheRegionaliEnums.StatoPratica.Confermata)
        {
            <div class="col-md-12 fw-bold">

                @if (Model.PraticheRegionaliImprese.LiquidazionePraticheRegionali.Count() > 0)
                {

                    var _liquidata = Model.PraticheRegionaliImprese.LiquidazionePraticheRegionali.Where(x => x.Liquidazione.StatoLiquidazioneId == (int)SediinPraticheRegionaliEnums.StatoLiqidazione.Liquidata);
                    var _inliquidazione = Model.PraticheRegionaliImprese.LiquidazionePraticheRegionali.Where(x => x.Liquidazione.StatoLiquidazioneId == (int)SediinPraticheRegionaliEnums.StatoLiqidazione.InLiquidazione);

                    if (_liquidata.Count() > 0)
                    {

                        <small class="text-@Html.GetLiquidazioneStatoCss((int)SediinPraticheRegionaliEnums.StatoLiqidazione.Liquidata)">"Liquidata @Html.ToShortDate(_liquidata.LastOrDefault().Liquidazione.DataLavorazione) su Iban: @_liquidata.LastOrDefault().PraticheRegionaliImprese.Iban"</small>
                    }
                    else if (_inliquidazione.Count() > 0)
                    {
                        <small class="text-@Html.GetLiquidazioneStatoCss((int)SediinPraticheRegionaliEnums.StatoLiqidazione.InLiquidazione)">"In Liquidazione"</small>
                    }
                    else
                    {
                        <small class="text-info">"Da Liquidare"</small>
                    }
                }
                else
                {
                    <small class="text-info">"Da Liquidare"</small>
                }

            </div>
            <hr />
        }

        @*@{ Html.RenderAction("DprRichiesta", "Pratiche", new
            {
                Model.RichiestaId,
                Model.TipoRichiestaId,
                Model.ReadOnly
            });}*@



        <div class="row mt-4">
            <div class="col-md-12">
                <div class="alert alert-warning fw-bold">
                    Il sottoscritto è consapevole delle responsabilità, anche penali, che si assume nel caso di dichiarazioni mendaci.
                    Inoltre il sottoscritto si impegna a consentire all’EBAC di effettuare le verifiche necessarie a riscontrare,
                    anche dopo l’erogazione delle provvidenze, la sussistenza dei presupposti per le erogazioni delle provvidenze.
                </div>


                <div class="form-check form-switch mt-5 offset-3">

                    @if (Model.ReadOnly.GetValueOrDefault())
                    {
                        @Html.HiddenFor(x => x.Responsabilita)

                        if (Model.Responsabilita.GetValueOrDefault())
                        {
                            <img src="~/Content/images/switch-on.png" />
                        }
                        else
                        {
                            <img src="~/Content/images/switch-off.png" />
                        }
                    }
                    else
                    {
                        var _checked = Model.Responsabilita.GetValueOrDefault();
                        @Html.CheckBox("Responsabilita", _checked, new { @class = "form-check-input" })
                    }

                    <label class="form-check-label fw-bold" style="margin-left:10px" for="Responsabilita">
                        Dichiaro di essere consapevole delle responsabilità.
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.Responsabilita, "", new { @class = "offset-3" })

            </div>
        </div>

        <hr />

        <div class="row mt-4">
            <div class="col-md-12 text-danger">
                <strong>* Campi obbligatori</strong>
            </div>
        </div>

        <hr />


        @if (Model.RichiestaId != 0)
        {
            <div class="text-danger mt-2 mb-4 fw-bold blink">
                @Html.ValidationSummary(false)
            </div>
        }


        @{Html.RenderAction("Azioni", new { Model.RichiestaId, Model.TipoRichiestaId, Model.StatoId, Model.LiquidataOinLiquidazione });}


    </div>
}

@{ Html.RenderPartial("~/Areas/Backend/Views/Shared/_PartialModalOffcanvas.cshtml"); }

@{ Html.RenderAction("ContatoreAnnuale"); }

@if (Model.IsTipoRichiestaDipendente.GetValueOrDefault())
{
    Html.RenderAction("ContatoreAnnuale", new { dipendenteId = Model.DipendenteId });
}
else
{
    Html.RenderAction("ContatoreAnnuale", new { aziendaId = Model.AziendaId });
}

<script src="~/Scripts/unobtrusiveParseForm.js"></script>
<script src="~/Scripts/checksumCFPiva.js"></script>
<script src="~/Scripts/requiredFromAdmin.js"></script>
<script src="~/Scripts/customRangeValidator.js"></script>
<script src="~/Scripts/ifIban.js"></script>
<script src="~/Scripts/requiredIsTrueValidatorValidator.js"></script>

<script>

    @if (Model.StatoId == (int)SediinPraticheRegionaliEnums.StatoPratica.Revisione)
    {
        if (!User.IsInRole(IdentityHelper.Roles.Admin.ToString()) || !User.IsInRole(IdentityHelper.Roles.Super.ToString()))
        {
            @:$().ready(function () {
            @:alertInfo("Attenzione, la richiesta è in Revisione. Effettuare le modifiche necessarie (vedi note sotto) e alla fine premere il pulsante \"Invia come Revisionata\"");
            @:})
        }
    }

    var _arrayDataValRequired = new Array();

    @if (Model.StatoId != (int)SediinPraticheRegionaliEnums.StatoPratica.Inviata && Model.StatoId != (int)SediinPraticheRegionaliEnums.StatoPratica.InviataRevisionata)
    {
        @:disableValidation();
    }

    function disableValidation() {

        $("[data-val]").each(function (index, item) {

            var id = $(item).attr("id");

            _arrayDataValRequired.push({ id: id, value: $(item).attr("data-val"), item:item });

            //$(item).removeAttr("data-val-required");
            $(item).attr("data-val", false);
            $(item).removeClass("input-validation-error");
            $(item).addClass("valid");

            $('#' + id + '-error').html("");
            $('[data-valmsg-for="' + id + '"]').removeClass("field-validation-error");
            $('[data-valmsg-for="' + id + '"]').addClass("field-validation-valid");
            $('[data-valmsg-for="' + id + '"]').html("");

        })

        $("#formSalvaRichiesta").removeData("validator");
        $("#formSalvaRichiesta").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse("#formSalvaRichiesta");
    }

    var _arrayDataAjax = new Array();
    _arrayDataAjax.push("href");
    _arrayDataAjax.push("data-ajax");
    _arrayDataAjax.push("data-ajax-success");
    _arrayDataAjax.push("data-ajax-failure");
    _arrayDataAjax.push("data-ajax-begin");

    $("[data-azione-id]").on("click", function () {
             //enable validation
             if ($(this).data("azione-id") == "@SediinPraticheRegionaliEnums.AzioniPratica.Invia.ToString()"
                 || $(this).data("azione-id") == "@SediinPraticheRegionaliEnums.AzioniPratica.InviaRevisionata.ToString()"
                 || $(this).data("azione-id") == "@SediinPraticheRegionaliEnums.AzioniPratica.Conferma.ToString()") {

            $.each(_arrayDataValRequired, function (index, item) {

                $(item.item).attr("data-val", true);
                     //$(item.item).attr("data-val-required", item.value);

                     try {
                         if ($("[id='" + item.id + "-error'][for=['" + item.id + "']") != undefined) {
                        $("[id='" + item.id + "-error'][for=['" + item.id + "']").remove();
                         }
                     } catch (e) {

                     }
                 });

            $("#formSalvaRichiesta").removeData("validator");
            $("#formSalvaRichiesta").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("#formSalvaRichiesta");

             }

             //disable validation
             if ($(this).data("azione-id") == "@SediinPraticheRegionaliEnums.AzioniPratica.Bozza.ToString()"
                 || $(this).data("azione-id") == "@SediinPraticheRegionaliEnums.AzioniPratica.BozzaRevisionata.ToString()") {
                 disableValidation();
             }

             setTimeout(function () { $("label[id*='-error']").remove(); }, 1)

        if ($("#formSalvaRichiesta").valid) {
                 if ($(this).data("azione-id") == "@SediinPraticheRegionaliEnums.AzioniPratica.Conferma.ToString()") {

                     var _notvalid = 0;
                    $.each(_arrayDataValRequired, function (index, item) {

                        if (!$('#' + item.id).valid()) {
                            _notvalid++;
                        }

                        $("label[id='" + item.id + "-error']").remove();
                    });

                    if (_notvalid == 0) {
                        confermaRichiesta();
                        return false;
                    }
                 }
             }
         })

    function onSuccessSalvaRichiesta(data) {
             if (data.isValid == false) {
                 alertDanger(data.message);
             }
             else {
                 updateListRicerca();
                 apriRichiesta(data.richiestaId, data.message);
             }
         }

         function apriRichiesta(richiestaId, message) {
        $.get("@Url.Action("ApriRichiesta")", { id:richiestaId}, function (data) {
                 if (data.isValid == false) {
                     alertDanger(data.message);
                 }
                 else {
                     showModalFullScreen_NoHeaderFooter(data);
                     alertSuccess(message);
                 }
             });
         }

    function annullaRichiesta() {

            disableValidation();

            const swalWithBootstrapButtons = Swal.mixin({
            customClass: {
            confirmButton: 'btn btn-success mr-1',
            cancelButton: 'btn btn-danger mr-1'
            },
                buttonsStyling: false
            });

            playNotifyConfirm();

            swalWithBootstrapButtons.fire({
            html: "Sicuro di voler \"Annullare\" la richiesta?",
            icon: "question",
            showCancelButton: true,
            confirmButtonText: 'Conferma',
            cancelButtonText: 'Annulla',
            allowOutsideClick: false,
            allowEscapeKey: false
                }).then((result) => {
            if (result.isConfirmed) {
                alertWaid();
                    $.post("@Html.EncodedAction("AnnullaRichiesta", "Pratiche", new { Model.RichiestaId })", function (data) {
                    if (data.isValid == false) {
                        alertDanger(data.message);
                    }
                    else {
                        apriRichiesta("@Model.RichiestaId", data.message);
                        updateListRicerca();
                    }});
                }
            })
}

    function confermaRichiesta() {

        if (!$("#formSalvaRichiesta").valid()) {
            return;
        }

        $("[data-valmsg-summary]").find("ul").html("");

         const swalWithBootstrapButtons = Swal.mixin({
         customClass: {
             confirmButton: 'btn btn-success mr-1',
                cancelButton: 'btn btn-danger mr-1'
            },
            buttonsStyling: false
         });

     playNotifyConfirm();

     swalWithBootstrapButtons.fire({
     html: "Sicuro di voler \"Confermare\" la richiesta?",
        icon: "question",
        showCancelButton: true,
        confirmButtonText: 'Conferma',
        cancelButtonText: 'Annulla',
        allowOutsideClick: false,
        allowEscapeKey: false
        }).then((result) => {
            if (result.isConfirmed) {
                alertWaid();
                $('#formSalvaRichiesta').append('<input type="hidden" name="Azione" value="@SediinPraticheRegionaliEnums.AzioniPratica.Conferma.ToString()" />');
                $("#formSalvaRichiesta").submit();
            }
        })
    }

    function disableAzioniButton() {
        $("[data-azione-id]").addClass("disabled");
        $("[data-azione-id]").attr("disabled", "disabled");
     }

     function enableAzioniButton() {
        $("[data-azione-id]").removeClass("disabled");
        $("[data-azione-id]").removeAttr("disabled");
     }


</script>


