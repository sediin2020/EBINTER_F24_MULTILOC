@model Sediin.PraticheRegionali.WebUI.Areas.Backend.Models.DipendenteAziendaAssociaViewModel

@Scripts.Render("~/bundles/jqueryval")

@using (Ajax.BeginForm("AssociaAzienda", new AjaxOptions
{
    //UpdateTargetId = "resultRicerca",
    OnBegin = "alertWaid()",
    OnSuccess = "onSuccessAssociaAzienda",
    OnFailure = "handleError"
}))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.DocumentoIdentita)
    @Html.HiddenFor(m => m.DipendenteAziendaAssociaViewModel_DipendenteId)
    @Html.HiddenFor(m => m.AziendaId)

    <div class="row">
        <div class="col-md-12 mb-2">
            <div class="alert alert-info">
                Inserire tutti i dati del contratto e clicca poi su <strong>"Associa Azienda"</strong> per creare il collegamento
            </div>
        </div>
        @*@if (User.IsInRole(IdentityHelper.Roles.Sportello.ToString()))
            {
                @Html.HiddenFor(m => m.DipendenteAziendaAssociaViewModel_DipendenteId)
                <div class="col-md-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DipendenteAziendaAssociaViewModel_DipendenteId, htmlAttributes: new { @class = "control-label" })
                        <div class="col-md-6">
                            @Html.TextBoxFor(model => model.DipendenteAziendaAssociaViewModel_NominativoCF, new { @class = "form-control", type = "search" })
                            @Html.ValidationMessageFor(model => model.DipendenteAziendaAssociaViewModel_DipendenteId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                @Html.AutocompleteDipendenteSportello("DipendenteAziendaAssociaViewModel_NominativoCF", "DipendenteAziendaAssociaViewModel_DipendenteId", "DipendenteAziendaAssociaViewModel_DipendenteId")

            }*@


        <div class="col-md-4">
            @Html.LabelFor(m => m.TipoImpiegoId, new { @class = "control-label" })
            @Html.DropDownListFor(m => m.TipoImpiegoId, Html.SelectList(Model.TipoImpiego.OrderBy(o => o.Descrizione), "TipoImpiegoId", "Descrizione", true), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TipoImpiegoId, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-4">
            @Html.LabelFor(m => m.TipoContrattoId, new { @class = "control-label" })
            @Html.DropDownListFor(m => m.TipoContrattoId, Html.SelectList(Model.TipoContratto.OrderBy(o => o.Descrizione), "TipoContrattoId", "Descrizione", true), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TipoContrattoId, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-4">
            @Html.LabelFor(m => m.TempoLavoroId, new { @class = "control-label" })
            @Html.DropDownListFor(m => m.TempoLavoroId, Html.SelectList(Model.TempoLavoro.OrderBy(o => o.Descrizione), "TempoLavoroId", "Descrizione", true), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.TempoLavoroId, "", new { @class = "text-danger" })
        </div>

    </div>

    <div class="row mt-2">

        <div class="col-md-2">
            @Html.LabelFor(m => m.DataAssunzione, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.DataAssunzione, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.DataAssunzione, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-4">
            @Html.LabelFor(m => m.CCNLCNEL, new { @class = "control-label" })
            @Html.TextBoxFor(m => m.CCNLCNEL, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CCNLCNEL, "", new { @class = "text-danger" })
        </div>

        <div class="col-md-6">
            @Html.LabelFor(m => m.DocumentoIdentita, new { @class = "control-label" })

            <div class="custom-file">
                <input type="file" class="form-control" id="fileUpload1" accept=".pdf"
                       data-fileupload-tipoallegato="DocumentoIdentita">
                <label class="badge bg-info"> in formato .pdf (max: 1MB)</label>
            </div>
            @Html.ValidationMessageFor(model => model.DocumentoIdentita, "", new { @class = "text-danger" })

        </div>
    </div>

    <div style="max-height:300px; overflow:auto" class="mt-4">
        <table class="table table-striped table-bordered table-hover">
            <thead class="table-fixed">
                <tr class="text-center bg-dark text-white">
                    <th>Ragione sociale</th>
                    <th>Codice Fiscale</th>
                    <th>Partita Iva</th>
                    <th>Tipologia</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @Model.Aziende.RagioneSociale
                        <br />
                        <small class="badge bg-info">Matricola: @Model.Aziende.MatricolaInps - CSC: @Model.Aziende.CSC</small>

                        @Html.DisplayTextFor(m => m.Aziende.Indirizzo)<br />
                        @Html.DisplayTextFor(m => m.Aziende.Localita.CAP) @Html.DisplayTextFor(m => m.Aziende.Localita.DENLOC) @Html.DisplayTextFor(m => m.Aziende.Provincia.DENPRO)

                    </td>
                    <td>@Model.Aziende.CodiceFiscale</td>
                    <td>@Model.Aziende.PartitaIva</td>
                    <td>@Html.CropText(Model.Aziende.Tipologia?.Descrizione, 50)</td>

                </tr>
            </tbody>


        </table>

    </div>


    <div class="modal-footer mt-4">


        @Ajax.EncodedAjaxActionLink("Nuova ricerca", "AssociaAziendaRicerca", "Dipendente", new
    {
        dipendenteId = Model.DipendenteAziendaAssociaViewModel_DipendenteId
    }, new AjaxOptions
    {
        OnBegin = "alertWaid()",
        OnSuccess = "showModal_NoFooter('Associa Azienda',data); alertClose()",
        OnFailure = "handleError"
    }, new { @class = "btn btn-primary" })


        <button class="btn btn-success" type="submit">
            Associa Azienda
        </button>


        @Ajax.EncodedAjaxActionLink("Chiudi finestra", "Anagrafica", "Dipendente", new
        {
        id = Model.DipendenteAziendaAssociaViewModel_DipendenteId
        }, new AjaxOptions
        {
        OnBegin = "alertWaid()",
        OnSuccess = "showModalFullScreen_NoHeaderFooter(data); alertClose()",
        OnFailure = "handleError"
        }, new { @class = "btn btn-danger", id = "buttonCloseModalAssociaAziendaRIcerca" })


    </div>
}

<script src="~/Scripts/unobtrusiveParseForm.js"></script>

<script>
    $('#DataAssunzione').inputmask();

    $().ready(function () {
        if (!location.href.toLowerCase().endsWith("ricerca")) {
            $("#buttonCloseModalAssociaAziendaRIcerca").removeAttr("href");
            $("#buttonCloseModalAssociaAziendaRIcerca").removeAttr("data-ajax-success");
            $("#buttonCloseModalAssociaAziendaRIcerca").removeAttr("data-ajax-begin");
            $("#buttonCloseModalAssociaAziendaRIcerca").on("click", function () { hideModal() });
        }
    })

    flatpickr('#DataAssunzione', {
            locale: "it",
            dateFormat: "d/m/Y",
            disableMobile: "true",
            allowInput: true,
            @*defaultDate:"@_minDate.ToShortDateString()",*@
            maxDate:"@DateTime.Now.ToShortDateString()",
            onChange: function (selectedDates, dateStr, instance) {
            },
        });

    function onSuccessAssociaAzienda(data) {
        if (!data.isValid) {
            alertDanger(data.message);
        }
        else {
             @if (!User.IsInRole(IdentityHelper.Roles.Dipendente.ToString()))
                {
                    @:updateListRicerca();

                    @:$.get("@Html.EncodedAction("Anagrafica", "Dipendente", new { id = Model.DipendenteAziendaAssociaViewModel_DipendenteId })", function(data1) {
                    @:showModalFullScreen_NoHeaderFooter(data1);
                    @:alertSuccess(data.message);})
                }
                else if (User.IsInRole(IdentityHelper.Roles.Dipendente.ToString()))
                {
                    @:$.get("@Html.EncodedAction("Anagrafica", "Dipendente", new { id = Model.DipendenteAziendaAssociaViewModel_DipendenteId })", function(data1) {
                    @:hideModal();
                    @:$("#contentrenderbody").html(data1);
                    @:alertSuccess(data.message);})
                }
        }
    }

    $('input[type=file]').on('change', function () {

        var _tipoAllegato = $(this).data("fileupload-tipoallegato");

        var _span = $("span[data-valmsg-for='" + _tipoAllegato + "']");

        const file = document.querySelector("[data-fileupload-tipoallegato='" + _tipoAllegato + "']").files[0];
        const reader = new FileReader();

        reader.addEventListener("load", function () {
            var myRe = new RegExp("([a-zA-Z0-9\s_\\.\-:])+(['.pdf'])$", "gi");

            if (!myRe.exec(getFileExtension(file.name))) {
                _span.addClass("field-validation-error");
                _span.html("Estensione non valida");
                _span.show();
                return;
            }

            if (getFileSize(file.size) > 1) {
                _span.addClass("field-validation-error");
                _span.html("Dimensione massima 1MB");
                _span.show();
                return;
            }

            $("#" + _tipoAllegato).val(reader.result);

            _span.hide();
            _span.html("");
        }, false);

        if (file) {
            reader.readAsDataURL(file);
        }
    });

</script>